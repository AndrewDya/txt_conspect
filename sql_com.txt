SQL (Structured Query Language) - язык структурированных запросов используется для работы с реляционными базами данных
БД - средство хранения данных, данные хранятся в табличной структуре, обеспечивая связи между таблицами через ключи

Базы данных бывают реляционные (SQL - связь) и нереляционные (NoSQL). В реляционных БД строки называются записями, а столбцы полями
Реляционные базы данных:
MySQL, PostgreSQL, MsSQL (MicrosoftSQL), SQLite, Oracle.

Нереляционные базы данных (Форматы хранения нереляционных баз данных: Пары ключ-значение; JSON-документ; семейства столбцов, графы и т.д.):
Redis, Memcached, MongoDB, CouchDB, elasticsearch.

Типы данных:

TINYINT - Хранит целые числа от -128 до 127 (знаковый) или от 0 до 255 (беззнаковый). Например, TINYINT может использоваться для хранения небольших целых чисел.
INT - Хранит целые числа от -2,147,483,648 до 2,147,483,647 (знаковый) или от 0 до 4,294,967,295 (беззнаковый). INT - это часто используемый тип для целых чисел.
BIGINT - Хранит целые числа от -9,223,372,036,854,775,808 до 9,223,372,036,854,775,807 (знаковый) или от 0 до 18,446,744,073,709,551,615 (беззнаковый). Этот тип используется для хранения очень больших целых чисел.
FLOAT - Хранит числа с плавающей запятой с приблизительной точностью. Например, FLOAT может использоваться для хранения чисел с десятичными дробями.
DOUBLE - Хранит числа с плавающей запятой с высокой точностью. DOUBLE обеспечивает более высокую точность, чем FLOAT, и может использоваться для хранения больших или очень точных чисел.
DATETIME - Хранит дату и время в формате 'YYYY-MM-DD HH:MM:SS'. Диапазон значений ограничен от '1000-01-01 00:00:00' до '9999-12-31 23:59:59'.
DATE - Хранит дату в формате 'YYYY-MM-DD'. Диапазон значений также ограничен от '1000-01-01' до '9999-12-31'.
TIMESTAMP - Хранит дату и время в формате 'YYYY-MM-DD HH:MM:SS'. Особенность TIMESTAMP в том, что он автоматически обновляется при каждом изменении строки в таблице. Диапазон значений ограничен от '1970-01-01 00:00:01' до '2038-01-19 03:14:07'.
CHAR(max_length) - Фиксированная строка заданной длины до 255 символов.
VARCHAR(max_length) - Строка переменной длины до 65,535 символов.
TINYTEXT - Строка переменной длины до 255 символов.
TEXT - Строка переменной длины до 65,535 символов.
MEDIUMTEXT - Строка переменной длины до 1,771,615 символов.
LONGTEXT - Строка переменной длины до 4 гигабайт.
ENUM - Перечисляемый тип данных, который позволяет хранить одно значение из предопределенного списка.
NULL - Значение, которое означает отсутствие данных. Поле с типом NULL может быть не заполнено. Используется для обозначения отсутствия значения.
NOT NULL - Помечает поле как обязательное для заполнения, то есть оно не может содержать значение NULL.

Типы связей в реляционных базах данных:

Один ко многим - one to many - каждая запись в одной таблице может иметь несколько связанных записей в другой таблице, 
  но каждая запись во второй таблице может быть связана только с одной записью в первой таблице
Один к одному - one to one - каждая запись в одной таблице имеет только одну соответствующую запись в другой таблице, и наоборот.
Многие ко многим - many to many - каждая запись в одной таблице может быть связана с несколькими записями в другой таблице, и наоборот. 
  Этот тип связи реализуется с помощью промежуточной таблицы, которая содержит связи между записями обеих таблиц.

Основные команды SQL:

SELECT - выбрать определенные поля из таблицы
FROM  - указать таблицу, из которой выбираются данные
* - выбрать все поля
WHERE - применить условие для фильтрации строк. Условия могут включать сравнения (=, <>, <, >, <=, >=), а также другие операторы.
AND и OR - объединить несколько условий с логическим "И" или "ИЛИ". Можно также использовать скобки для явного задания порядка операций
BETWEEN - выбрать значения в заданном диапазоне. Диапазон задается двумя значениями, например, BETWEEN 1 AND 10
LIKE - выбрать значения с определенным шаблоном
  Знак процента (%): Знак процента обозначает ноль, один или несколько символов.
  Метасимвол "квадратные скобки" ([ ]) используется для одновременного указания набора символов, по которым нужно выполнить поиск.
IS NULL и IS NOT NULL - выбрать строки с NULL значениями или непустыми значениями соответственно.
IN - выбрать значения, входящие в список
ORDER BY  - сортировка результатов
  ASC - сортировка по возрастанию (по умолчанию)
  DESC - сортировка по убыванию:
LIMIT - ограничение числа возвращаемых строк. Указывается после SELECT для ограничения количества строк в результате.
DISTINCT - выбрать уникальные значения столбца. Используется для исключения дубликатов из результатов запроса.
JOIN ... ON - объединение таблиц по условию
UNION - объединение результатов нескольких SELECT-запросов. Можно использовать UNION или UNION ALL, в зависимости от того, нужно ли учитывать дубликаты.

Функции SQL:

COUNT(*) - подсчет количества строк или записей в результате запроса. Может использоваться для получения общего количества строк в таблице или после применения фильтров.
IF(cond, e1, e2) - функция, которая возвращает e1, если cond истинно, и e2, если cond ложно. В SQL также часто используется функция CASE WHEN ... THEN ... ELSE ... END для условной логики.
CHAR_LENGTH(str) - возвращает длину строки str в символах.
SUBSTRING(str, start, length) - возвращает подстроку из строки str, начиная с указанной позиции start и длиной length.
CONCAT() - функция, которая объединяет строки в одну строку.
REPLACE(field, from, to) - заменяет часть строки в поле field на другую строку to, где строка from найдена.
CURRENT_TIMESTAMP() или NOW() - возвращает текущую дату и время.

Агрегатные функции:

SUM(column) - вычисляет сумму значений в столбце.
MIN(column) - находит минимальное значение в столбце.
MAX(column) - находит максимальное значение в столбце.
AVG(column) - вычисляет среднее значение в столбце.

Типы объединений:
INNER JOIN (внутреннее слияние) - возвращает только те строки, для которых существуют соответствующие значения в обеих таблицах, заданных в запросе.
  Если нет совпадающих значений, то эти строки будут исключены из результата.
LEFT JOIN (левое объединение) - возвращает все строки из таблицы "левого" операнда и только совпадающие строки из таблицы "правого" операнда.
  Если в "правом" операнде нет совпадающих значений, то соответствующие столбцы будут содержать NULL-значения.
RIGHT JOIN (правое объединение) - возвращает все строки из таблицы "правого" операнда и только совпадающие строки из таблицы "левого" операнда.
  Если в "левом" операнде нет совпадающих значений, то соответствующие столбцы будут содержать NULL-значения.
FULL JOIN (полное объединение) - возвращает все строки из обеих таблиц (левой и правой). Дополняет недостающие значения NULL-значениями в столбцах, где нет совпадающих значений в одной из таблиц.
  Этот тип объединения включает в себя результаты как LEFT JOIN, так и RIGHT JOIN, а также строки с обоих сторон, где есть совпадения.

Основные команды MySQL:

CREATE DATABASE <database_name>; - создание базы данных
USE <database_name>; - использование базы данных

CREATE TABLE IF NOT EXISTS users (
  id INT PRIMARY KEY AUTO_INCREMENT,
  name VARCHAR(50),
  email VARCHAR(100)
); - создание таблицы

CREATE TABLE IF NOT EXISTS orders (
  order_id INT PRIMARY KEY AUTO_INCREMENT,
  user_id INT,
  order_date DATE,
  FOREIGN KEY (user_id) REFERENCES users(id)
);

INSERT INTO <table_name> (column1, column2, ...)
VALUES (value1, value2, ...); - вставка данных в таблицу

UPDATE <table_name>
SET column1 = value1, column2 = value2, ...
WHERE <condition>; - обновление (изменение) данных в таблице

DELETE FROM <table_name>
WHERE <condition>; - удаление данных из таблицы

DROP TABLE <table_name>; - удаление таблицы

Postgres:
sudo service postgresql stop
psql -U postgres
\dt
\l
