Встроенные классы Python (int, float, complex, str, list, tuple, dict, set, frozenset, bool):

int - представляет целые числа. Объекты этого класса поддерживают различные арифметические операции
float - представляет числа с плавающей точкой. Используется для представления десятичных чисел
complex - представляет комплексные числа в форме a + bj, где a и b - это вещественные числа, а j - мнимая единица
str - представляет строки текста. Объекты этого класса поддерживают множество операций для работы со строками
list - представляет списки, то есть упорядоченные изменяемые последовательности элементов
tuple - представляет кортежи, упорядоченные неизменяемые последовательности элементов
dict - представляет словари, то есть коллекции пар ключ-значение, где каждый ключ уникален
set - представляет множества, то есть неупорядоченные изменяемые коллекции уникальных элементов
frozenset - представляет замороженные множества, которые являются неизменяемыми и могут использоваться в качестве ключей в словарях
bool - представляет логические значения True и False для выполнения логических операций и условных проверок. Часть методов наследуется от int

int - целые числа. Атрибуты и методы:

denominator - возвращает знаменатель числа в виде объекта типа int
numerator - возвращает числитель числа в виде объекта типа int

as_integer_ratio() - возвращает кортеж, представляющий число в виде дроби, например, 10 будет представлено как (10, 1)
bit_count() - возвращает количество установленных битов в двоичном представлении числа
bit_length() - возвращает количество битов, необходимых для представления числа в двоичной системе
conjugate() - возвращает комплексно-сопряженное число (для комплексных чисел, для целых чисел это просто само число)
from_bytes() - статический метод для создания целого числа из последовательности байтов
is_integer() - проверяет, является ли число целым (integer)
to_bytes() - преобразует целое число в последовательность байтов с заданным порядком байтов и добавлением нулевых байтов

float - числа с плавающей точкой. Методы:

as_integer_ratio() - возвращает кортеж, представляющий число в виде дроби
conjugate() - возвращает комплексно-сопряженное число (для комплексных чисел); для чисел с плавающей точкой, это просто само число
fromhex(s) - статический метод для создания числа с плавающей точкой из строки в шестнадцатеричной нотации
hex() - возвращает строку, представляющую число в шестнадцатеричной нотации
is_integer() - метод, который проверяет, является ли число целым

complex - комплексные числа. Атрибуты и методы:

real - возвращает действительную часть комплексного числа
imag - возвращает мнимую часть комплексного числа
numerator - возвращает числитель комплексного числа в виде объекта типа int (целое число)
denominator - возвращает знаменатель комплексного числа в виде объекта типа int (целое число)

conjugate() - возвращает комплексно-сопряженное число (действительная часть остается неизменной, а мнимая меняет знак)
as_integer_ratio() - возвращает кортеж, представляющий комплексное число в виде дроби
bit_count() - возвращает количество установленных битов в двоичном представлении комплексного числа
bit_length() - возвращает количество битов, необходимых для представления комплексного числа в двоичной системе
from_bytes() - статический метод для создания комплексного числа из последовательности байтов
is_integer() - метод, который проверяет, является ли комплексное число целым (integer)
to_bytes() - метод, который преобразует комплексное число в последовательность байтов с заданным порядком байтов и добавлением нулевых байтов

str - строки. Методы:

capitalize() - преобразует первую букву строки в заглавную, а все остальные в строчные
casefold() - применяет case-folding к строке (более агрессивное преобразование для сравнения строк)
center() - выравнивает строку по центру заданной ширины, заполняя пустое место символами
count() - возвращает количество непересекающихся вхождений подстроки
encode() - преобразует строку в байты, используя указанную кодировку
endswith() - проверяет, заканчивается ли строка указанной подстрокой
expandtabs() - заменяет символы табуляции в строке на заданное количество пробелов
find() - возвращает индекс первого вхождения подстроки в строке
format() - форматирует строку с использованием аргументов
format_map() - форматирует строку, используя словарь для подстановки значений
index() - похож на find(), но вызывает исключение, если подстрока не найдена
isalnum() - проверяет, состоит ли строка только из букв и цифр
isalpha() - проверяет, состоит ли строка только из букв
isascii() - проверяет, состоит ли строка из ASCII-символов
isdecimal() - проверяет, состоит ли строка только из десятичных цифр
isdigit() - проверяет, состоит ли строка только из цифр
isidentifier() - проверяет, является ли строка допустимым идентификатором Python
islower() - проверяет, состоит ли строка только из строчных букв
isnumeric() - проверяет, состоит ли строка только из числовых символов
isprintable() - проверяет, можно ли вывести строку на печать
isspace() - проверяет, состоит ли строка только из пробельных символов
istitle() - проверяет, являются ли слова в строке заголовками (с заглавными буквами в начале каждого слова)
isupper() - проверяет, состоит ли строка только из заглавных букв
join() - объединяет строки из списка в одну строку с разделителем
ljust() - выравнивает строку влево, добавляя заполнитель
lower() - преобразует строку в нижний регистр
lstrip() - удаляет пробелы и заданные символы слева от строки
maketrans() - возвращает таблицу перевода для метода translate()
partition() - разбивает строку на три части по первому вхождению подстроки
removeprefix() - удаляет указанный префикс из строки
removesuffix() - удаляет указанный суффикс из строки
replace() - заменяет все вхождения подстроки другой подстрокой
rfind() - возвращает индекс последнего вхождения подстроки в строке
rindex() - похож на rfind(), но вызывает исключение, если подстрока не найдена
rjust() - выравнивает строку вправо, добавляя заполнитель
rpartition() - разбивает строку на три части по последнему вхождению подстроки
rsplit() - разделяет строку на слова, начиная с конца
rstrip() - удаляет пробелы и заданные символы справа от строки
split() - разделяет строку на слова
splitlines() - разделяет строку на строки, используя разрывы строк
startswith() - проверяет, начинается ли строка с указанной подстроки
strip() - удаляет пробелы и заданные символы с обоих концов строки
swapcase() - меняет регистр символов в строке (заглавные буквы становятся строчными, и наоборот)
title() - преобразует строку в формат заголовка (первая буква каждого слова в верхнем регистре)
translate() - применяет таблицу перевода к строке
upper() - преобразует строку в верхний регистр
zfill() - дополняет строку нулями слева до указанной ширины

list - списки. Методы:

append() - добавляет элемент в конец списка
clear() - удаляет все элементы из списка
copy() - создает поверхностную копию списка
count() - возвращает количество вхождений заданного элемента в списке
extend() - расширяет список, добавляя элементы из другой последовательности
index() - возвращает индекс первого вхождения заданного элемента
insert() - вставляет элемент в указанную позицию
pop() - удаляет и возвращает элемент по индексу (по умолчанию - последний элемент)
remove() - удаляет первое вхождение заданного элемента
reverse() - изменяет порядок элементов в списке на обратный
sort() - сортирует элементы списка (по умолчанию в порядке возрастания)

tuple - кортежи. Методы:

count() - возвращает количество вхождений заданного элемента в кортеже
index() - возвращает индекс первого вхождения заданного элемента

dict - словари. Методы:

clear() - удаляет все элементы из словаря
copy() - создает поверхностную копию словаря
fromkeys() - создает новый словарь с указанными ключами и значениями
get() - возвращает значение, связанное с заданным ключом, иначе возвращает значение по умолчанию
items() - возвращает представление (view) пар ключ-значение в словаре
keys() - возвращает представление ключей в словаре
pop() - удаляет элемент по заданному ключу и возвращает его значение
popitem() - удаляет и возвращает произвольную пару ключ-значение из словаря
setdefault() - возвращает значение, связанное с заданным ключом, и, если ключ отсутствует, добавляет его с указанным значением
update() - обновляет словарь, добавляя пары ключ-значение из другого словаря или последовательности
values() - возвращает представление значений в словаре

set - множества. Методы:

add() - добавляет элемент в множество
clear() - удаляет все элементы из множества
copy() - создает поверхностную копию множества
difference() - возвращает разницу между двумя множествами
difference_update() - удаляет элементы множества, которые присутствуют в другом множестве
discard() - удаляет элемент из множества, если он присутствует
intersection() - возвращает пересечение двух множеств
intersection_update() - оставляет только элементы, присутствующие в обоих множествах
isdisjoint() - проверяет, не имеют ли два множества общих элементов
issubset() - проверяет, является ли текущее множество подмножеством другого множества
issuperset() - проверяет, является ли текущее множество надмножеством другого множества
pop() - удаляет и возвращает произвольный элемент из множества
remove() - удаляет указанный элемент из множества
symmetric_difference() - возвращает симметрическую разницу (элементы, присутствующие только в одном из множеств)
symmetric_difference_update() заменяет множество с его симметрической разницей
union() - возвращает объединение двух множеств (все элементы, присутствующие хотя бы в одном из множеств)
update() - обновляет множество, добавляя элементы из другого множества

frozenset - неизменяемые множества. Методы:

copy() - создает копию frozenset
difference() - возвращает разницу между двумя frozenset
intersection() - возвращает пересечение двух frozenset
isdisjoint() - проверяет, не имеют ли два frozenset общих элементов
issubset() - проверяет, является ли текущее frozenset подмножеством другого frozenset
issuperset() - проверяет, является ли текущее frozenset надмножеством другого frozenset
symmetric_difference() - возвращает симметрическую разницу (элементы, присутствующие только в одном из frozenset)
union() - возвращает объединение двух frozenset (все элементы, присутствующие хотя бы в одном из frozenset)

bool - логические значения True и False. Атрибуты и методы:

numerator - возвращает числитель числа в виде объекта типа int (целое число). Для True это будет 1, и для False - 0
real - возвращает действительную часть комплексного числа (для True это 1, и для False - 0)
denominator - возвращает знаменатель числа в виде объекта типа int (целое число). Для True это будет 1, и для False - 1
bit_length() - возвращает количество битов, необходимых для представления числа в двоичной системе. Этот атрибут возвращает 1 для True (1) и 0 для False (0)
imag - возвращает мнимую часть комплексного числа (для True это всегда 0, и для False - 0)

as_integer_ratio() - возвращает кортеж, представляющий число в виде дроби. Для True это будет (1, 1), а для False (0, 1)
conjugate() - возвращает комплексно-сопряженное число (для True это будет также True, а для False - False)
from_bytes() - статический метод для создания целого числа из последовательности байтов. Для True это будет 1, и для False - 0
is_integer() - метод, который проверяет, является ли число целым (integer). Для True это True, и для False - True
to_bytes() - преобразует целое число в последовательность байтов с заданным порядком байтов и добавлением нулевых байтов. Для True это будет b'\x01', и для False - b'\x00'

Тип None, представляющий отсутствие значения.

Встроенные функции и методы в Python:

abs() - возвращает абсолютное значение числа
all() - возвращает True, если все элементы в итерируемом объекте истинны, и False, если хотя бы один из них ложен
any() - возвращает True, если хотя бы один элемент в итерируемом объекте истинен, и False, если все они ложны
ascii() - возвращает строку, представляющую строку в формате ASCII
bin() - возвращает строку, представляющую двоичное представление числа
bool() - преобразует значение в булево (логическое) значение
bytearray() - создает изменяемый массив байт
bytes() - создает неизменяемый массив байт
callable() - проверяет, можно ли вызывать объект как функцию
chr() - возвращает символ с заданным числовым кодом ASCII
classmethod() - декоратор, который позволяет определить метод класса, а не экземпляра
compile() - компилирует исходный код Python в байт-код
complex() - создает комплексное число
delattr() - удаляет атрибут объекта
dict() - создает словарь
dir() - возвращает список атрибутов и методов объекта
divmod() - возвращает частное и остаток от деления двух чисел
enumerate() - возвращает итератор, содержащий пары (индекс, элемент) для итерируемого объекта
eval() - выполняет строку как код Python
exec() - выполняет строку как код Python (аналог eval, но предназначен для выполнения нескольких строк кода)
filter() - фильтрует элементы итерируемого объекта на основе заданной функции
float() - преобразует значение в число с плавающей запятой
format() - форматирует значение с использованием указанного формата
frozenset() - создает неизменяемое множество
getattr() - получает значение атрибута объекта
globals() - возвращает глобальные переменные текущего модуля
hasattr() - проверяет, существует ли атрибут у объекта
hash() - возвращает хеш-значение объекта
help() - выводит справочную информацию о модуле, функции или классе
hex() - возвращает строку, представляющую число в шестнадцатеричной системе счисления
id() - возвращает уникальный идентификатор объекта
input() - считывает строку с клавиатуры
int() - преобразует значение в целое число
isinstance() - проверяет, является ли объект экземпляром указанного класса
issubclass() - проверяет, является ли класс подклассом другого класса
iter() - создает итератор для объекта
len() - возвращает количество элементов в итерируемом объекте
list() - создает список
locals() - возвращает локальные переменные текущей функции
map() - применяет функцию ко всем элементам итерируемого объекта
max() - возвращает максимальный элемент в итерируемом объекте
memoryview() - создает объект для работы с памятью, например, буфером
min() - возвращает минимальный элемент в итерируемом объекте
next() - возвращает следующий элемент итератора
object() - базовый класс для всех классов в Python
oct() - возвращает строку, представляющую число в восьмеричной системе счисления
open() - открывает файл для чтения или записи
ord() - возвращает числовой код символа
pow() - возвращает степень числа
print() - выводит текст на экран
property() - создает свойство объекта
range() - создает последовательность чисел
repr( - возвращает строку, представляющую объект
reversed() - возвращает итератор с элементами в обратном порядке
round() - округляет число
set() - создает множество
setattr() - устанавливает значение атрибута объекта
slice() - создает объект среза
sorted() - возвращает отсортированный список элементов
staticmethod() - декоратор, который позволяет определить статический метод класса
str() - преобразует значение в строку
sum() - возвращает сумму элементов в итерируемом объекте
super() - возвращает объект родительского класса
tuple() - создает кортеж
type() - возвращает тип объекта
vars() - возвращает словарь атрибутов объекта
zip() - создает итератор из последовательностей
