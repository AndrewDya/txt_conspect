Встроенные классы Python (int, float, complex, str, list, tuple, dict, set, frozenset, bool)  - это набор предопределенных классов, которые доступны в самом языке Python 
без необходимости импорта из дополнительных библиотек или модулей. Эти классы представляют различные типы данных и структуры, которые могут быть использованы для хранения, 
обработки и манипулирования данными в Python.:

int (целые числа): Представляет целочисленные значения. Он поддерживает операции арифметики, такие как сложение, вычитание, умножение и деление, 
а также операции сравнения между целыми числами. Атрибуты и методы:

denominator - возвращает знаменатель числа в виде объекта типа int
numerator - возвращает числитель числа в виде объекта типа int

as_integer_ratio() - возвращает кортеж, представляющий число в виде дроби, например, 10 будет представлено как (10, 1)
bit_count() - возвращает количество установленных битов в двоичном представлении числа
bit_length() - возвращает количество битов, необходимых для представления числа в двоичной системе
conjugate() - возвращает комплексно-сопряженное число (для комплексных чисел, для целых чисел это просто само число)
from_bytes() - статический метод для создания целого числа из последовательности байтов
is_integer() - проверяет, является ли число целым (integer)
to_bytes() - преобразует целое число в последовательность байтов с заданным порядком байтов и добавлением нулевых байтов

float (числа с плавающей точкой): Представляет числа с плавающей точкой, то есть числа с десятичными дробями. Он используется для выполнения точных математических операций. Методы:

as_integer_ratio() - возвращает кортеж, представляющий число в виде дроби
conjugate() - возвращает комплексно-сопряженное число (для комплексных чисел); для чисел с плавающей точкой, это просто само число
fromhex(s) - статический метод для создания числа с плавающей точкой из строки в шестнадцатеричной нотации
hex() - возвращает строку, представляющую число в шестнадцатеричной нотации
is_integer() - метод, который проверяет, является ли число целым

complex (комплексные числа): Представляет комплексные числа в форме a + bj, где a - действительная часть, b - мнимая часть, и j - мнимая единица. 
Этот класс используется для работы с комплексными числами и выполняет операции над ними. Атрибуты и методы:

real - возвращает действительную часть комплексного числа
imag - возвращает мнимую часть комплексного числа
numerator - возвращает числитель комплексного числа в виде объекта типа int (целое число)
denominator - возвращает знаменатель комплексного числа в виде объекта типа int (целое число)

conjugate() - возвращает комплексно-сопряженное число (действительная часть остается неизменной, а мнимая меняет знак)
as_integer_ratio() - возвращает кортеж, представляющий комплексное число в виде дроби
bit_count() - возвращает количество установленных битов в двоичном представлении комплексного числа
bit_length() - возвращает количество битов, необходимых для представления комплексного числа в двоичной системе
from_bytes() - статический метод для создания комплексного числа из последовательности байтов
is_integer() - метод, который проверяет, является ли комплексное число целым (integer)
to_bytes() - метод, который преобразует комплексное число в последовательность байтов с заданным порядком байтов и добавлением нулевых байтов

str (строки): Представляет текстовые строки. Строки в Python могут содержать символы, числа, буквы и другие символы. 
Они поддерживают множество методов для работы со строками, такие как конкатенация, поиск подстрок, замена и форматирование. Методы:

capitalize() - преобразует первую букву строки в заглавную, а все остальные в строчные
casefold() - применяет case-folding к строке (более агрессивное преобразование для сравнения строк)
center() - выравнивает строку по центру заданной ширины, заполняя пустое место символами
count() - возвращает количество непересекающихся вхождений подстроки
encode() - преобразует строку в байты, используя указанную кодировку
endswith() - проверяет, заканчивается ли строка указанной подстрокой
expandtabs() - заменяет символы табуляции в строке на заданное количество пробелов
find() - возвращает индекс первого вхождения подстроки в строке
format() - форматирует строку с использованием аргументов
format_map() - форматирует строку, используя словарь для подстановки значений
index() - похож на find(), но вызывает исключение, если подстрока не найдена
isalnum() - проверяет, состоит ли строка только из букв и цифр
isalpha() - проверяет, состоит ли строка только из букв
isascii() - проверяет, состоит ли строка из ASCII-символов
isdecimal() - проверяет, состоит ли строка только из десятичных цифр
isdigit() - проверяет, состоит ли строка только из цифр
isidentifier() - проверяет, является ли строка допустимым идентификатором Python
islower() - проверяет, состоит ли строка только из строчных букв
isnumeric() - проверяет, состоит ли строка только из числовых символов
isprintable() - проверяет, можно ли вывести строку на печать
isspace() - проверяет, состоит ли строка только из пробельных символов
istitle() - проверяет, являются ли слова в строке заголовками (с заглавными буквами в начале каждого слова)
isupper() - проверяет, состоит ли строка только из заглавных букв
join() - объединяет строки из списка в одну строку с разделителем
ljust() - выравнивает строку влево, добавляя заполнитель
lower() - преобразует строку в нижний регистр
lstrip() - удаляет пробелы и заданные символы слева от строки
maketrans() - возвращает таблицу перевода для метода translate()
partition() - разбивает строку на три части по первому вхождению подстроки
removeprefix() - удаляет указанный префикс из строки
removesuffix() - удаляет указанный суффикс из строки
replace() - заменяет все вхождения подстроки другой подстрокой
rfind() - возвращает индекс последнего вхождения подстроки в строке
rindex() - похож на rfind(), но вызывает исключение, если подстрока не найдена
rjust() - выравнивает строку вправо, добавляя заполнитель
rpartition() - разбивает строку на три части по последнему вхождению подстроки
rsplit() - разделяет строку на слова, начиная с конца
rstrip() - удаляет пробелы и заданные символы справа от строки
split() - разделяет строку на слова
splitlines() - разделяет строку на строки, используя разрывы строк
startswith() - проверяет, начинается ли строка с указанной подстроки
strip() - удаляет пробелы и заданные символы с обоих концов строки
swapcase() - меняет регистр символов в строке (заглавные буквы становятся строчными, и наоборот)
title() - преобразует строку в формат заголовка (первая буква каждого слова в верхнем регистре)
translate() - применяет таблицу перевода к строке
upper() - преобразует строку в верхний регистр
zfill() - дополняет строку нулями слева до указанной ширины

list (списки): Список - это упорядоченная коллекция элементов. Он может содержать элементы разных типов и позволяет добавлять, удалять и изменять элементы. 
Списки в Python часто используются для хранения и манипулирования данными. Методы:

append() - добавляет элемент в конец списка
clear() - удаляет все элементы из списка
copy() - создает поверхностную копию списка
count() - возвращает количество вхождений заданного элемента в списке
extend() - расширяет список, добавляя элементы из другой последовательности
index() - возвращает индекс первого вхождения заданного элемента
insert() - вставляет элемент в указанную позицию
pop() - удаляет и возвращает элемент по индексу (по умолчанию - последний элемент)
remove() - удаляет первое вхождение заданного элемента
reverse() - изменяет порядок элементов в списке на обратный
sort() - сортирует элементы списка (по умолчанию в порядке возрастания)

tuple (кортежи): Кортеж - это неизменяемая упорядоченная последовательность элементов. Он поддерживает доступ по индексу и может использоваться, 
когда вам нужна коллекция данных, которую нельзя изменить. Методы:

count() - возвращает количество вхождений заданного элемента в кортеже
index() - возвращает индекс первого вхождения заданного элемента

dict (словари): Словарь представляет ассоциативный массив с ключами и значениями. Он используется для хранения данных в виде пар "ключ-значение" 
и обеспечивает быстрый доступ к значениям по ключу Методы:

clear() - удаляет все элементы из словаря
copy() - создает поверхностную копию словаря
fromkeys() - создает новый словарь с указанными ключами и значениями
get() - возвращает значение, связанное с заданным ключом, иначе возвращает значение по умолчанию
items() - возвращает представление (view) пар ключ-значение в словаре
keys() - возвращает представление ключей в словаре
pop() - удаляет элемент по заданному ключу и возвращает его значение
popitem() - удаляет и возвращает произвольную пару ключ-значение из словаря
setdefault() - возвращает значение, связанное с заданным ключом, и, если ключ отсутствует, добавляет его с указанным значением
update() - обновляет словарь, добавляя пары ключ-значение из другого словаря или последовательности
values() - возвращает представление значений в словаре

set (множества): Множество - это коллекция уникальных элементов без определенного порядка. Он поддерживает операции объединения, пересечения и разности множеств, 
что полезно при работе с уникальными данными. Методы:

add() - добавляет элемент в множество
clear() - удаляет все элементы из множества
copy() - создает поверхностную копию множества
difference() - возвращает разницу между двумя множествами
difference_update() - удаляет элементы множества, которые присутствуют в другом множестве
discard() - удаляет элемент из множества, если он присутствует
intersection() - возвращает пересечение двух множеств
intersection_update() - оставляет только элементы, присутствующие в обоих множествах
isdisjoint() - проверяет, не имеют ли два множества общих элементов
issubset() - проверяет, является ли текущее множество подмножеством другого множества
issuperset() - проверяет, является ли текущее множество надмножеством другого множества
pop() - удаляет и возвращает произвольный элемент из множества
remove() - удаляет указанный элемент из множества
symmetric_difference() - возвращает симметрическую разницу (элементы, присутствующие только в одном из множеств)
symmetric_difference_update() заменяет множество с его симметрической разницей
union() - возвращает объединение двух множеств (все элементы, присутствующие хотя бы в одном из множеств)
update() - обновляет множество, добавляя элементы из другого множества

frozenset (неизменяемые множества): Этот класс аналогичен классу set, но он неизменяемый, то есть после создания вы не можете изменить его содержимое. Методы:

copy() - создает копию frozenset
difference() - возвращает разницу между двумя frozenset
intersection() - возвращает пересечение двух frozenset
isdisjoint() - проверяет, не имеют ли два frozenset общих элементов
issubset() - проверяет, является ли текущее frozenset подмножеством другого frozenset
issuperset() - проверяет, является ли текущее frozenset надмножеством другого frozenset
symmetric_difference() - возвращает симметрическую разницу (элементы, присутствующие только в одном из frozenset)
union() - возвращает объединение двух frozenset (все элементы, присутствующие хотя бы в одном из frozenset)

bool (логические значения True и False): Класс bool представляет логические значения True (истина) и False (ложь). Он используется для выполнения 
условных операций и логических вычислений. Атрибуты и методы:

numerator - возвращает числитель числа в виде объекта типа int (целое число). Для True это будет 1, и для False - 0
real - возвращает действительную часть комплексного числа (для True это 1, и для False - 0)
denominator - возвращает знаменатель числа в виде объекта типа int (целое число). Для True это будет 1, и для False - 1
bit_length() - возвращает количество битов, необходимых для представления числа в двоичной системе. Этот атрибут возвращает 1 для True (1) и 0 для False (0)
imag - возвращает мнимую часть комплексного числа (для True это всегда 0, и для False - 0)

as_integer_ratio() - возвращает кортеж, представляющий число в виде дроби. Для True это будет (1, 1), а для False (0, 1)
conjugate() - возвращает комплексно-сопряженное число (для True это будет также True, а для False - False)
from_bytes() - статический метод для создания целого числа из последовательности байтов. Для True это будет 1, и для False - 0
is_integer() - метод, который проверяет, является ли число целым (integer). Для True это True, и для False - True
to_bytes() - преобразует целое число в последовательность байтов с заданным порядком байтов и добавлением нулевых байтов. Для True это будет b'\x01', и для False - b'\x00'

Встроенные функции и методы в Python - это предопределенные функции и методы, которые предоставляются в самом языке Python для выполнения различных операций и задач 
без необходимости импорта дополнительных библиотек или модулей. Эти функции и методы широко используются программистами для упрощения кодирования и решения различных задач.:

abs() - возвращает абсолютное значение числа
all() - возвращает True, если все элементы в итерируемом объекте истинны, и False, если хотя бы один из них ложен
any() - возвращает True, если хотя бы один элемент в итерируемом объекте истинен, и False, если все они ложны
ascii() - возвращает строку, представляющую строку в формате ASCII
bin() - возвращает строку, представляющую двоичное представление числа
bool() - преобразует значение в булево (логическое) значение
bytearray() - создает изменяемый массив байт
bytes() - создает неизменяемый массив байт
callable() - проверяет, можно ли вызывать объект как функцию
chr() - возвращает символ с заданным числовым кодом ASCII
classmethod() - декоратор, который позволяет определить метод класса, а не экземпляра
compile() - компилирует исходный код Python в байт-код
complex() - создает комплексное число
delattr() - удаляет атрибут объекта
dict() - создает словарь
dir() - возвращает список атрибутов и методов объекта
divmod() - возвращает частное и остаток от деления двух чисел
enumerate() - возвращает итератор, содержащий пары (индекс, элемент) для итерируемого объекта
eval() - выполняет строку как код Python
exec() - выполняет строку как код Python (аналог eval, но предназначен для выполнения нескольких строк кода)
filter() - фильтрует элементы итерируемого объекта на основе заданной функции
float() - преобразует значение в число с плавающей запятой
format() - форматирует значение с использованием указанного формата
frozenset() - создает неизменяемое множество
getattr() - получает значение атрибута объекта
globals() - возвращает глобальные переменные текущего модуля
hasattr() - проверяет, существует ли атрибут у объекта
hash() - возвращает хеш-значение объекта
help() - выводит справочную информацию о модуле, функции или классе
hex() - возвращает строку, представляющую число в шестнадцатеричной системе счисления
id() - возвращает уникальный идентификатор объекта
input() - считывает строку с клавиатуры
int() - преобразует значение в целое число
isinstance() - проверяет, является ли объект экземпляром указанного класса
issubclass() - проверяет, является ли класс подклассом другого класса
iter() - создает итератор для объекта
len() - возвращает количество элементов в итерируемом объекте
list() - создает список
locals() - возвращает локальные переменные текущей функции
map() - применяет функцию ко всем элементам итерируемого объекта
max() - возвращает максимальный элемент в итерируемом объекте
memoryview() - создает объект для работы с памятью, например, буфером
min() - возвращает минимальный элемент в итерируемом объекте
next() - возвращает следующий элемент итератора
object() - базовый класс для всех классов в Python
oct() - возвращает строку, представляющую число в восьмеричной системе счисления
open() - открывает файл для чтения или записи
ord() - возвращает числовой код символа
pow() - возвращает степень числа
print() - выводит текст на экран
property() - создает свойство объекта
range() - создает последовательность чисел
repr( - возвращает строку, представляющую объект
reversed() - возвращает итератор с элементами в обратном порядке
round() - округляет число
set() - создает множество
setattr() - устанавливает значение атрибута объекта
slice() - создает объект среза
sorted() - возвращает отсортированный список элементов
staticmethod() - декоратор, который позволяет определить статический метод класса
str() - преобразует значение в строку
sum() - возвращает сумму элементов в итерируемом объекте
super() - возвращает объект родительского класса
tuple() - создает кортеж
type() - возвращает тип объекта
vars() - возвращает словарь атрибутов объекта
zip() - создает итератор из последовательностей

Исключения (Exceptions). Они используются для обработки ошибок и исключений в коде и позволяют более гибко управлять потоком выполнения программы:

ArithmeticError - базовый класс для исключений, связанных с арифметическими операциями
AssertionError - исключение, возбуждаемое, когда оператор assert не удовлетворяет условию
AttributeError - исключение, возбуждаемое, когда атрибут объекта не существует
BaseException - базовый класс для всех исключений
BlockingIOError - исключение, связанное с блокирующей операцией ввода-вывода
BrokenPipeError - исключение, возбуждаемое при записи данных в разорванный или закрытый канал
BufferError - базовый класс для исключений, связанных с буферами
BytesWarning - предупреждение, возбуждаемое при работе с байтовыми данными
ChildProcessError - исключение, связанное с ошибками в дочернем процессе
ConnectionAbortedError - исключение, связанное с разрывом соединения
ConnectionError - базовый класс для исключений, связанных с ошибками соединения
ConnectionRefusedError - исключение, возбуждаемое при отказе соединения
ConnectionResetError - исключение, возбуждаемое при сбросе соединения
DeprecationWarning - предупреждение, связанное с устаревшими возможностями Python
EOFError - исключение, возбуждаемое при достижении конца файла
Ellipsis - константа, обозначающая "многоточие" (используется в специфичных случаях)
EncodingWarning - предупреждение, связанное с проблемами кодировки
EnvironmentError - базовый класс для исключений, связанных с окружением
Exception - базовый класс для всех исключений (кроме системных)
False - логическое значение "False"
FileExistsError - исключение, возбуждаемое при попытке создать файл, который уже существует
FileNotFoundError - исключение, возбуждаемое при попытке доступа к несуществующему файлу
FloatingPointError - исключение, связанное с ошибками вещественной арифметики
FutureWarning - предупреждение, связанное с предупреждениями о будущих изменениях
GeneratorExit - исключение, возбуждаемое при закрытии генератора
IOError - устаревшее исключение, связанное с ошибками ввода-вывода
ImportError - исключение, возбуждаемое при проблемах с импортом модуля
ImportWarning - предупреждение, связанное с проблемами при импорте
IndentationError - базовый класс для исключений, связанных с ошибками в отступах
IndexError - исключение, возбуждаемое при выходе за границы диапазона
InterruptedError - исключение, связанное с прерываниями выполнения
IsADirectoryError - исключение, возбуждаемое при попытке выполнить операцию с каталогом, когда это запрещено
KeyError - исключение, возбуждаемое при попытке доступа к несуществующему ключу словаря
KeyboardInterrupt - исключение, возбуждаемое при прерывании выполнения пользователем (обычно с помощью Ctrl+C)
LookupError - базовый класс для исключений, связанных с поиском
MemoryError - исключение, возбуждаемое при недостатке памяти
ModuleNotFoundError - исключение, возбуждаемое при попытке импорта несуществующего модуля
NameError - исключение, возбуждаемое при попытке доступа к несуществующей переменной
None - специальное значение, представляющее отсутствие значения
NotADirectoryError - исключение, возбуждаемое при попытке выполнить операцию с объектом, который не является каталогом
NotImplemented - константа, обозначающая неопределенное (не реализованное) значение
NotImplementedError - исключение, возбуждаемое при вызове не реализованного метода
OSError - базовый класс для исключений, связанных с операционной системой
OverflowError - исключение, связанное с переполнением числа
PendingDeprecationWarning - предупреждение, связанное с предупреждениями о будущих изменениях
PermissionError - исключение, связанное с отсутствием разрешений
ProcessLookupError - исключение, возбуждаемое при ошибке поиска процесса
RecursionError - исключение, возбуждаемое при слишком глубокой рекурсии
ReferenceError - исключение, возбуждаемое при попытке доступа к ссылке на объект, который был удален
ResourceWarning - предупреждение, связанное с ресурсами
RuntimeError - базовый класс для исключений, связанных с ошибками во времени выполнения
RuntimeWarning - предупреждение, связанное с предупреждениями во времени выполнения
StopAsyncIteration - исключение, указывающее на завершение асинхронной итерации
StopIteration - исключение, указывающее на завершение итерации
SyntaxError - исключение, возбуждаемое при синтаксической ошибке в коде
SyntaxWarning - предупреждение, связанное с синтаксическими ошибками
SystemError - исключение, связанное с ошибками в интерпретаторе Python
SystemExit - исключение, указывающее на завершение работы программы
TabError - исключение, возбуждаемое при ошибке в отступах
TimeoutError - исключение, связанное с истечением времени ожидания операции
True - логическое значение "True"
TypeError - исключение, возбуждаемое при несоответствии типов данных
UnboundLocalError - исключение, связанное с попыткой доступа к несвязанной локальной переменной
UnicodeDecodeError - исключение, связанное с ошибкой декодирования юникодных данных
UnicodeEncodeError - исключение, связанное с ошибкой кодирования юникодных данных
UnicodeError - базовый класс для исключений, связанных с юникодом
UnicodeTranslateError - исключение, связанное с ошибками в переводе юникодных данных
UnicodeWarning - предупреждение, связанное с работой с юникодом
UserWarning - предупреждение, создаваемое пользователем
ValueError - исключение, возбуждаемое при недопустимом значении
Warning - базовый класс для предупреждений
ZeroDivisionError - исключение, возбуждаемое при попытке деления на ноль

Стандартные модули (Standard Modules):

Это модули, которые поставляются вместе с самим языком Python, и они включены в стандартную библиотеку Python.
Эти модули предоставляют базовую функциональность для различных задач, таких как работа с файлами, сетями, математическими вычислениями и другими.
Для использования достаточно импортировать модуль в коде.

abc - предоставляет абстрактные базовые классы, которые можно использовать для создания пользовательских классов с определенным поведением
aifc - модуль для работы с аудиофайлами в формате AIFF (Audio Interchange File Format Compressed)
antigravity - это "пасхалка" в Python, открывая которую, вы увидите шутку о том, как Python спасает программистов от работы и выводит картинку с комикса XKCD
argparse - предоставляет инструменты для парсинга аргументов командной строки и создания удобных интерфейсов командной строки
array - предоставляет эффективные массивы, похожие на списки, но с фиксированным типом данных
ast - модуль для работы с абстрактным синтаксическим деревом Python
asyncio - предоставляет инфраструктуру для написания асинхронного кода, используя асинхронные ключевые слова async и await
atexit - позволяет регистрировать функции, которые будут выполнены при выходе из программы
audioop - предоставляет функции для манипулирования аудиоданными
base64 - предоставляет функции для кодирования и декодирования данных в формате base64
bdb - модуль для отладки Python-программы, предоставляет средства для интерактивной отладки
binascii - предоставляет функции для работы с бинарными данными, такие как конвертация байтовых данных в текстовые форматы (например, в hex) и наоборот
bisect - содержит функции для работы с упорядоченными последовательностями, такие как поиск и вставка элементов
builtins - это встроенный модуль, который предоставляет доступ к встроенным функциям и объектам Python
bz2 - модуль для работы с сжатием данных в формате BZ2 (Burrows-Wheeler Transform compression)
cProfile - предоставляет профилировщик для измерения производительности кода Python
calendar - позволяет работать с календарями, датами и временем
cgi - предоставляет инструменты для создания веб-приложений, основанных на обработке CGI (Common Gateway Interface) запросов
cgitb - модуль, предоставляющий более информативные трассировки стека для ошибок, происходящих в веб-приложениях
chunk - этот модуль устарел и больше не рекомендуется к использованию
cmath - предоставляет функции для работы с комплексными числами в Python
cmd - позволяет создавать интерактивные командные оболочки (CLI) для ваших приложений
code - предоставляет класс для выполнения кода Python в интерактивной среде
codecs - предоставляет функции для работы с различными кодировками и декодирования текстовых данных
codeop - модуль для компиляции и выполнения динамически созданного кода Python
collections - содержит дополнительные контейнеры данных, такие как namedtuple и OrderedDict
colorsys - предоставляет функции для преобразования цветов между различными цветовыми моделями
compileall - модуль для рекурсивной компиляции файлов с расширением .pyc в директории
concurrent - содержит пакеты для работы с параллельным выполнением кода, такие как concurrent.futures
configparser - предоставляет средства для работы с конфигурационными файлами в формате INI
contextlib - предоставляет декораторы и контекстные менеджеры для более чистого и удобного управления контекстами выполнения кода
contextvars - позволяет работать с переменными контекста, которые могут быть доступны в разных частях кода в рамках одного контекста выполнения
copy - предоставляет функции для создания поверхностных и глубоких копий объектов
copyreg - модуль для настройки сериализации и десериализации пользовательских классов
csv - позволяет работать с файлами в формате CSV (Comma-Separated Values)
ctypes - предоставляет возможность вызывать функции из динамических библиотек, написанных на языке C, из Python
curses - позволяет создавать текстовые интерфейсы с использованием библиотеки curses
dataclasses - предоставляет декоратор @dataclass для автоматической генерации методов для работы с данными
datetime - позволяет работать с датой и временем, включая операции с датами, временем и интервалами времени
dbm - предоставляет интерфейс для работы с базами данных в формате "database manager" (DBM)
decimal - модуль для вычислений с фиксированной точностью (высокая точность) с использованием десятичных чисел
difflib - предоставляет функции для сравнения и нахождения различий между последовательностями (например, текстовыми файлами)
dis - модуль для анализа и генерации байткода Python
doctest - позволяет встраивать документацию и тесты в docstrings вашего кода
email - предоставляет средства для работы с электронной почтой, создания и отправки писем
encodings - содержит кодировки для работы с различными символьными кодировками
enum - предоставляет поддержку для перечислений (enum) в Python
errno - предоставляет константы и коды ошибок для работы с системными вызовами
faulthandler - позволяет отслеживать сбои и исключения, происходящие в Python-программах
fcntl - предоставляет интерфейс для работы с системными вызовами fcntl
filecmp - предоставляет функции для сравнения файлов и директорий
fileinput - позволяет итерироваться по строкам из нескольких файлов, как если бы они были одним файлом
fnmatch - позволяет выполнять сопоставление шаблонов (wildcard) файловым именам
ftplib - предоставляет клиентский интерфейс для работы с FTP-серверами
functools - предоставляет функции для работы с функциями, такие как partial и reduce
gc - модуль для управления сборкой мусора (Garbage Collection) в Python
genericpath - вспомогательный модуль для работы с путями к файлам и директориям
getopt - предоставляет функции для обработки аргументов командной строки в стиле UNIX
getpass - позволяет безопасно вводить пароли, скрывая ввод пользователя
gettext - предоставляет инструменты для локализации (перевода) приложений
glob - предоставляет функции для поиска файлов с использованием шаблонов
graphlib - предоставляет инструменты для работы с графами и топологической сортировки
grp - позволяет работать с информацией о группах пользователей в системе
gzip - модуль для работы с сжатием данных в формате Gzip
hashlib - предоставляет функции для работы с хеш-функциями, такие как MD5 и SHA-1
heapq - реализует кучи (heaps) и функции для работы с ними
hmac - позволяет создавать коды аутентификации сообщений с использованием хеш-функций
html - предоставляет инструменты для работы с HTML-кодом, включая эскапирование и декодирование HTML-сущностей
http - предоставляет инструменты для работы с протоколом HTTP, включая сервер HTTP
imaplib - позволяет взаимодействовать с почтовыми серверами по протоколу IMAP (Internet Message Access Protocol)
imghdr - модуль для определения формата изображения на основе его содержимого
importlib - предоставляет возможности для динамической загрузки и импорта модулей в Python
inspect - предоставляет функции для инспекции объектов в Python, такие как модули, классы и функции
io - предоставляет классы для работы с потоками данных ввода-вывода
ipaddress - п редоставляет классы для работы с IP-адресами и подсетями
itertools - предоставляет функции для работы с итерируемыми объектами и создания итераторов
json - позволяет работать с форматом JSON (JavaScript Object Notation) для сериализации и десериализации данных
keyword - предоставляет список зарезервированных ключевых слов в Python
linecache - позволяет получать строки из исходных файлов Python для обработки ошибок
locale - позволяет настраивать локализацию и форматирование чисел, дат и времени
logging - предоставляет инструменты для регистрации (логирования) событий в приложении
lzma - модуль для работы с сжатием данных в формате LZMA
mailbox - предоставляет классы для работы с почтовыми ящиками и письмами
mailcap - позволяет получать информацию о поддерживаемых мультимедийных типах и просмотрщиках в системе
marshal - модуль для сериализации и десериализации объектов Python
math - предоставляет математические функции и константы
mimetypes - предоставляет средства для определения MIME-типов файлов на основе их расширения
mmap - позволяет создавать отображения файлов в память и работать с ними как с байтовыми массивами
modulefinder - предоставляет инструменты для анализа зависимостей модулей в Python-проектах
multiprocessing - предоставляет поддержку для параллельного выполнения кода с использованием процессов
netrc - позволяет работать с файлами .netrc, содержащими информацию о учетных записях
nis - позволяет взаимодействовать с системой NIS (Network Information Service)
nntplib - предоставляет клиентский интерфейс для работы с серверами NNTP (Network News Transfer Protocol)
ntpath - модуль для работы с путями к файлам на платформе Windows
nturl2path - модуль для преобразования путей URL в пути файлов на платформе Windows
numbers - предоставляет числовые абстрактные базовые классы, такие как Number и Integral
opcode - содержит определения операций байткода Python
operator - предоставляет функции для работы с операторами и операциями в Python
os - предоставляет функции для взаимодействия с операционной системой, такие как доступ к файлам, директориям и многие другие операции
ossaudiodev - модуль для работы с аудиоустройствами в операционной системе Unix
pathlib - модуль для удобной работы с путями к файлам и директориям
pdb - модуль для отладки Python-программ, предоставляет интерактивный отладчик
pickle - предоставляет возможность сериализации и десериализации объектов Python
pickletools - модуль для анализа и обработки сериализованных данных с использованием pickle
pip - утилита для установки и управления пакетами Python
pipes - устаревший модуль для работы с процессами и командной оболочкой, рекомендуется использовать subprocess вместо него
pkgutil - предоставляет функции для поиска и загрузки пакетов и модулей
platform - позволяет получать информацию о платформе и системе, на которой выполняется Python
plistlib - предоставляет инструменты для работы с файлами в формате plist (Property List)
poplib - предоставляет клиентский интерфейс для работы с почтовыми серверами по протоколу POP3 (Post Office Protocol, версия 3)
posixpath - предоставляет функции для работы с путями к файлам на платформе Unix
pprint - предоставляет инструменты для "красивого" вывода данных в Python
profile - позволяет создавать профили выполнения Python-программ
pstats - модуль для работы с данными профиля выполнения, собранными с использованием profile
pty - модуль для работы с псевдотерминалами (PTY)
pwd - предоставляет доступ к информации о пользователях и группах в системе
py_compile - модуль для компиляции файлов с расширением .py в байткод
pyclbr - модуль для анализа и работы с информацией о классах и функциях в модулях Python
pydoc - предоставляет документацию и инструменты для работы с документацией Python
pydoc_data - модуль, содержащий данные и ресурсы для pydoc
pyexpat - модуль для работы с библиотекой Expat для парсинга XML
queue - предоставляет потокобезопасные очереди для параллельного программирования
quopri - модуль для кодирования и декодирования текста в формате quoted-printable
random - предоставляет функции для генерации случайных чисел и выборки из последовательностей
re модуль для работы с регулярными выражениями
readline - модуль для добавления поддержки функций редактирования и истории ввода в интерактивный режим Python
reprlib - предоставляет функции для создания кратких строковых представлений объектов
resource - предоставляет доступ к системным ресурсам и ограничениям
rlcompleter - модуль для поддержки автодополнения в интерактивной оболочке Python
runpy - позволяет выполнить код Python из скрипта или модуля
sched - предоставляет планировщик событий для выполнения задач в будущем
secrets - модуль для безопасной генерации случайных чисел и создания криптографически надежных токенов
select - предоставляет функции для мультиплексирования ввода-вывода и работы с сокетами
selectors - предоставляет альтернативный API для мультиплексирования ввода-вывода, введенный в Python 3.4
shelve - позволяет создавать хранилища данных, подобные словарям, и сохранять их на диске
shlex - модуль для разбора командной строки и аргументов командной строки
shutil - предоставляет функции для работы с файлами и директориями, включая копирование, перемещение и удаление
signal - позволяет работать с сигналами операционной системы
site - модуль для настройки и настройки окружения Python
sitecustomize - этот модуль выполняется при запуске интерпретатора Python и может быть использован для настройки окружения
smtplib - предоставляет клиентский интерфейс для отправки электронной почты через SMTP (Simple Mail Transfer Protocol)
sndhdr - предоставляет функции для определения формата аудиофайлов
socket - предоставляет возможности для работы с сокетами и сетевым взаимодействием
socketserver - предоставляет высокоуровневый API для создания сетевых серверов
spwd - позволяет работать с "теневым" файлом паролей в системе Unix
sqlite3 - модуль для работы с базами данных SQLite в Python
sre_compile - модуль для компиляции регулярных выражений в байткод
sre_constants - содержит константы, используемые в регулярных выражениях
sre_parse - модуль для разбора и анализа регулярных выражений
ssl - предоставляет функции для работы с SSL/TLS-шифрованием и безопасным соксом
stat - предоставляет функции для работы с информацией о файлах и директориях
statistics - предоставляет статистические функции для работы с данными, такие как расчет среднего и медианы
string - предоставляет константы и функции для работы со строками
stringprep - предоставляет функции для нормализации и предварительной обработки строк
struct - позволяет упаковывать и распаковывать бинарные данные, такие как структуры и массивы
subprocess - предоставляет функции для запуска внешних процессов и взаимодействия с ними
sunau - модуль для работы с аудиофайлами в формате Sun AU
symtable - предоставляет функции для анализа символьных таблиц Python
sys - предоставляет доступ к переменным и функциям, связанными с интерпретатором Python
sysconfig - позволяет получать информацию о конфигурации и установке Python
syslog - предоставляет функции для работы с системным журналом (syslog) на платформе Unix
tabnanny - модуль для поиска и анализа некорректного использования символов табуляции в коде
tarfile - предоставляет функции для работы с архивами в формате tar
telnetlib - предоставляет клиентский интерфейс для работы с серверами Telnet
tempfile - позволяет создавать временные файлы и директории
termios - предоставляет функции для работы с интерфейсами терминала
test - содержит инфраструктуру для создания и запуска тестов в Python
textwrap - предоставляет функции для форматирования текста и обертки строк
this - это "Поле чудес" для Python, содержащее код, который генерирует известный манифест Zen of Python
threading - предоставляет инструменты для многопоточного программирования в Python
time - позволяет работать с временем и ожидать определенных интервалов времени
timeit - модуль для измерения времени выполнения кода с использованием таймера
token - предоставляет константы для различных токенов в Python
tokenize - модуль для анализа и разбора исходного кода Python в токены
trace - модуль для создания трассировок выполнения кода Python
traceback - предоставляет функции для работы с стеком вызовов и выводом трассировок ошибок
tracemalloc - модуль для отслеживания и профилирования использования памяти в Python
tty - модуль для работы с терминальными устройствами
turtle - предоставляет инструменты для создания графических рисунков с использованием черепахи
types - содержит константы и функции для работы с типами данных и объектами
typing - предоставляет поддержку аннотаций типов данных в Python
unicodedata - предоставляет функции для работы с символьными данными Юникода
unittest - фреймворк для создания и запуска тестовых наборов в Python
urllib - предоставляет инструменты для работы с URL и сетевыми запросами
uu - модуль uu предоставляет функции для кодирования и декодирования файлов в формате uuencode. Этот формат использовался для кодирования двоичных файлов в текстовую форму
uuid - модуль uuid позволяет работать с уникальными идентификаторами (UUID, Universally Unique Identifier), которые широко используются для идентификации объектов и данных
venv - модуль venv используется для создания виртуальных окружений Python. Виртуальное окружение позволяет изолировать зависимости и пакеты Python для разных проектов
warnings - предоставляет механизм для управления и вывода предупреждений (warnings) в Python. Это позволяет контролировать и отлавливать потенциальные проблемы в коде
wave - модуль wave предоставляет возможности для работы с аудиофайлами в формате WAV. Вы можете читать и записывать аудиоданные в формате WAV с помощью этого модуля
weakref - модуль weakref позволяет создавать слабые ссылки на объекты Python. Слабые ссылки позволяют объектам удаляться из памяти, если на них больше не ссылаются
webbrowser - модуль webbrowser предоставляет функции для управления веб-браузером. Это может использоваться для открытия веб-страниц в браузере по умолчанию на вашей системе
wsgiref - модуль wsgiref является частью стандартной библиотеки Python и предоставляет минимальную реализацию WSGI (Web Server Gateway Interface) для создания веб-приложений
xdrlib - модуль xdrlib предоставляет инструменты для кодирования и декодирования данных в формате XDR (External Data Representation). XDR используется для передачи данных между компьютерами с различными архитектурами
xml - модуль xml предоставляет инфраструктуру для обработки XML-документов в Python. Он включает различные подмодули и инструменты для работы с XML
xmlrpc - модуль xmlrpc предоставляет возможность создавать и работать с XML-RPC серверами и клиентами в Python. XML-RPC - это простой протокол удаленного вызова процедур на основе XML
xxlimited - модуль xxlimited является внутренним модулем, используемым для реализации некоторых низкоуровневых деталей Python. Он обычно не используется напрямую программистами
xxsubtype - модуль xxsubtype связан с реализацией низкоуровневых деталей интерпретатора и не предназначен для использования программистами
zipapp - модуль zipapp позволяет создавать исполняемые ZIP-архивы (подобные виртуальным окружениям) для упаковки и распространения приложений и библиотек Python
zipfile - модуль zipfile предоставляет возможности для работы с ZIP-архивами. Вы можете создавать, читать и распаковывать ZIP-файлы с его помощью
zipimport - модуль zipimport используется для импорта модулей и пакетов Python, которые находятся в ZIP-архивах. Это позволяет включать библиотеки и приложения внутрь ZIP-файлов
zlib - модуль zlib предоставляет функции для сжатия и распаковки данных с использованием библиотеки сжатия данных zlib. Этот модуль часто используется для архивации данных и сжатия файлов
zoneinfo - модуль zoneinfo предоставляет поддержку для работы с временными зонами и правилами перехода для часовых поясов в Python. Это улучшает поддержку временных зон и переходов между ними

Сторонние модули (Third-Party Modules):

Это модули, которые разработаны сторонними разработчиками или сообществом Python, и они не включены в стандартную библиотеку.
Сторонние модули часто решают более специфические задачи и могут быть установлены отдельно.
Они расширяют функциональность Python, добавляя новые возможности и инструменты. 
Перед началом использования нужно установить модуль через менеджер пакетов pip install <package>.
После установки модуля его необходимо импортировать в коде.
https://pypi.org/ - официальный сайт с различными сторонними модулями / библиотеками / фреймворками.

Requests - удобный HTTP-клиент для выполнения HTTP-запросов
Beautiful Soup - модуль для парсинга HTML и XML-документов, облегчает извлечение данных из веб-страниц
Pillow - модуль для обработки изображений, позволяет открывать, редактировать и сохранять изображения
Openpyxl - модуль для работы с файлами Excel, позволяет создавать, читать и редактировать документы Excel
PyYAML - модуль для работы с YAML-файлами, часто используется для настройки и конфигурации
Sqlalchemy - ORM (Object-Relational Mapping) для работы с базами данных, упрощает взаимодействие с различными СУБД
Scipy - набор модулей для научных и инженерных вычислений, включая библиотеки для оптимизации, статистики и других задач
Regex - модуль для работы с регулярными выражениями, предоставляет возможность поиска и обработки текста на основе шаблонов
Pytz - модуль для работы с часовыми поясами и временными зонами, обеспечивает управление временем и датами
Pickle - модуль для сериализации и десериализации объектов Python, используется для сохранения и загрузки данных
Python-dotenv - модуль для загрузки переменных окружения из файлов .env, что делает управление конфигурацией проекта более гибким
Matplotlib  - предоставляет инструменты для создания графиков и визуализации данных. С его помощью можно создавать различные типы графиков, диаграмм и изображений
Selenium  - позволяет создавать скрипты, которые могут управлять браузером, выполнять действия на веб-страницах, заполнять формы, собирать данные и многое другое

Библиотеки (Libraries):

Библиотеки в Python - это коллекции модулей и инструментов, предназначенных для решения определенных задач или областей программирования.
Библиотеки могут включать как стандартные модули, так и сторонние модули.
Они обычно предоставляют более обширные наборы функциональности и могут включать в себя множество модулей и инструментов для конкретной области.

NumPy - библиотека для выполнения численных операций и работы с многомерными массивами данных. Широко используется в научных вычислениях и анализе данных
Pandas - библиотека для работы с данными, предоставляет структуры данных и инструменты для анализа и манипулирования табличными данными
Matplotlib - библиотека для создания графиков и визуализации данных
Scikit-learn - библиотека для машинного обучения и анализа данных, предоставляет инструменты для обучения моделей и оценки их производительности
TensorFlow - библиотека для машинного обучения и глубокого обучения, разрабатываемая Google. Используется для создания и обучения нейронных сетей
PyTorch - библиотека для машинного обучения и глубокого обучения, предоставляет гибкий фреймворк для создания и обучения нейронных сетей
Keras - высокоуровневый интерфейс для создания нейронных сетей, который работает поверх библиотек TensorFlow и Theano
NLTK (Natural Language Toolkit) - библиотека для обработки естественного языка, предоставляет инструменты для анализа текста и работы с лингвистическими данными
Pygame - библиотека для разработки компьютерных игр и мультимедийных приложений
OpenCV - библиотека для обработки изображений и компьютерного зрения, используется для создания приложений, связанных с обработкой изображений
Selenium - инструмент для автоматизации веб-браузера, используется для создания тестов, ботов и приложений для веб-скрапинга

Фреймворки (Frameworks):

Фреймворки - это более высокоуровневые структуры, которые предоставляют основу для создания приложений или решения конкретных задач.
Они включают в себя не только модули и библиотеки, но также определенную архитектуру и правила разработки.
Фреймворки обычно предоставляют готовые решения и структуры, которые разработчики могут настраивать и расширять.

Django - мощный фреймворк для создания веб-приложений и веб-сайтов. Предоставляет готовые решения для управления базами данных, авторизацией, административным интерфейсом и многими другими функциями
Flask - легковесный веб-фреймворк, который предоставляет базовый набор инструментов для создания веб-приложений. Flask обладает простой архитектурой и широкими возможностями расширения
FastAPI - современный фреймворк для создания веб-API, основанный на стандарте OpenAPI. Он предоставляет автоматическую генерацию документации и поддерживает асинхронное программирование
Tornado - фреймворк для создания асинхронных сетевых приложений и серверов. Подходит для создания высоконагруженных веб-приложений
Pyramid - гибкий фреймворк для создания веб-приложений, который обеспечивает множество возможностей для настройки и расширения
CherryPy - простой и минималистичный фреймворк для создания веб-приложений. Он позволяет создавать веб-приложения с минимальным объемом кода
Bottle - ещё один легковесный фреймворк для веб-разработки, предоставляет минималистичные решения для создания маленьких веб-приложений
web2py - фреймворк для создания веб-приложений, который стремится упростить разработку путем предоставления встроенных инструментов для аутентификации, администрирования и других функций
CubicWeb - фреймворк для создания семантических веб-приложений, специализируется на управлении данными и связях между ними
Sanic - асинхронный веб-фреймворк, который поддерживает асинхронное программирование и создание высокопроизводительных веб-приложений
Bocadillo - минималистичный веб-фреймворк, предназначенный для создания асинхронных веб-приложений с поддержкой WebSocket
