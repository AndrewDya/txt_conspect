Ниже приведены основные команды Docker с кратким описанием:

docker run - запускает новый контейнер из образа
docker ps - показывает список запущенных контейнеров
docker stop - останавливает один или несколько запущенных контейнеров
docker rm - удаляет один или несколько контейнеров
docker images - показывает список локально сохраненных образов
docker rmi - удаляет один или несколько образов
docker build - собирает новый образ на основе Dockerfile
docker push - отправляет локальный образ на Docker Hub или другой реестр
docker pull - загружает образ с Docker Hub или другого реестра

Ниже приведены основные команды Docker Compose с кратким описанием:

docker-compose up - создает и запускает контейнеры на основе определения в файле docker-compose.yml
docker-compose down - останавливает и удаляет все контейнеры, созданные при запуске файла docker-compose.yml
docker-compose ps - показывает список запущенных контейнеров, созданных с помощью docker-compose
docker-compose logs - показывает логи запущенных контейнеров, созданных с помощью docker-compose
docker-compose build - собирает образы на основе определения в файле docker-compose.yml
docker-compose run - запускает команду в контейнере, созданном из определения в файле docker-compose.yml

Ниже приведены основные команды Django с кратким описанием:

django-admin startproject <projectname> - создает новый проект Django с указанным именем.
python manage.py startapp [appname] - создает новое Django-приложение с указанным именем внутри текущего проекта.
python manage.py runserver - запускает локальный сервер для разработки, по умолчанию на порту 8000.
python manage.py makemigrations - создает файлы миграций, которые определяют, как должны быть изменены модели приложения.
python manage.py migrate - применяет все миграции к базе данных, чтобы обновить ее согласно определениям моделей.
python manage.py createsuperuser - создает суперпользователя, которому будут доступны все функции администратора Django.
python manage.py shell - запускает интерактивную оболочку Django, в которой можно выполнять команды Python для работы с моделями и данными.
python manage.py collectstatic - копирует все статические файлы проекта (CSS, JS, изображения и т.д.) в единый каталог для использования в продакшен-сервере.
python manage.py test - запускает тесты приложения для проверки корректности его работы.

Виды HTTP запросов:

GET - используется для запроса данных с сервера, безопасный: только получает данные
POST - используется для отправки данных на сервер для создания новых ресурсов, небезопасный
PUT - используется для обновления существующего ресурса на сервере.
PATCH - используется для частичного обновления существующего ресурса на сервере.
DELETE - используется для запроса удаления ресурса на сервере.
HEAD - подобен GET, но возвращает только заголовки ответа и без тела ресурса.
OPTIONS - используется для запроса информации о возможных методах запроса, поддерживаемых ресурсом, и другой мета-информации.

HTTP-статус-коды (HTTP status codes) - это числовые значения, которые сервер отправляет в ответ на HTTP-запросы, чтобы сообщить клиенту о результате запроса.

1xx (Информационные коды):
100: Continue (Продолжай) - Сервер готов продолжить обработку запроса.
101: Switching Protocols (Смена протоколов) - Сервер соглашается с изменением протокола, предложенного клиентом.

2xx (Успешные коды):
200: OK (Успешно) - Запрос успешно обработан, и результат передается в ответе.
201: Created (Создано) - Ресурс успешно создан на сервере.
204: No Content (Нет содержимого) - Запрос выполнен успешно, но в ответе нет содержимого.

3xx (Перенаправления):
301: Moved Permanently (Перемещено навсегда) - Ресурс был перемещен на постоянной основе, и клиент должен перейти по новому URL.
302: Found (Найдено) - Ресурс временно перемещен, и клиент должен перейти по временному URL.
304: Not Modified (Не изменено) - Ресурс не был изменен с момента последнего запроса, и клиент может использовать кэшированную версию.

4xx (Ошибки клиента):
400: Bad Request (Неверный запрос) - Сервер не может обработать запрос из-за синтаксической ошибки или неправильных данных.
401: Unauthorized (Неавторизовано) - Для доступа к ресурсу требуется аутентификация.
403: Forbidden (Запрещено) - Клиент не имеет разрешения на доступ к ресурсу.
404: Not Found (Не найдено) - Ресурс не найден на сервере.

5xx (Ошибки сервера):
500: Internal Server Error (Внутренняя ошибка сервера) - Внутренняя ошибка сервера при обработке запроса.
502: Bad Gateway (Плохой шлюз) - Сервер, выступающий в роли шлюза или прокси, получил недопустимый ответ от вышестоящего сервера.
503: Service Unavailable (Сервис недоступен) - Сервер временно не может обрабатывать запросы из-за перегрузки или технических работ.

Принципы SOLID:

SOLID - это аббревиатура, представляющая пять основных принципов объектно-ориентированного программирования и проектирования. 
Эти принципы помогают разработчикам создавать более чистый, гибкий и поддерживаемый код. Вот принципы SOLID и их применение в Python:

Принцип единственной ответственности (Single Responsibility Principle, SRP): Этот принцип гласит, что класс должен иметь только одну причину для изменения. 
Он должен быть ответственным только за одну часть функциональности программы. В Python это означает, что класс или функция должны выполнять только одну конкретную задачу.

Принцип открытости/закрытости (Open/Closed Principle, OCP): Согласно этому принципу, программные сущности, такие как классы, модули и функции, 
должны быть открыты для расширения (новая функциональность может быть добавлена) и закрыты для модификации (существующий код не должен изменяться). 
В Python это можно достичь, используя наследование и полиморфизм.

Принцип подстановки Барбары Лисков (Liskov Substitution Principle, LSP): Этот принцип утверждает, что объекты базового класса должны быть заменяемыми 
объектами производных классов без нарушения корректности программы. В Python это означает, что производные классы должны соответствовать интерфейсу базового класса.

Принцип разделения интерфейса (Interface Segregation Principle, ISP): Согласно этому принципу, клиенты не должны зависеть от интерфейсов, которые они не используют. 
В Python это можно достичь, создавая множество узких интерфейсов, а не один большой.

Принцип инверсии зависимостей (Dependency Inversion Principle, DIP): Этот принцип гласит, что высокоуровневые модули не должны зависеть от низкоуровневых модулей, 
оба должны зависеть от абстракций. Кроме того, абстракции не должны зависеть от деталей, детали должны зависеть от абстракций. В Python это можно достичь, 
используя инъекцию зависимостей (Dependency Injection) и создавая абстракции для взаимодействия с зависимостями.

Принципы объектно-ориентированного программирования (ООП) в Python включают в себя следующие основные концепции:

Инкапсуляция (Encapsulation): Инкапсуляция означает объединение данных (переменных) и методов (функций), которые работают с этими данными, внутри класса. Класс предоставляет 
интерфейс для взаимодействия с данными, скрывая детали их реализации. В Python это достигается с использованием закрытых атрибутов и методов, которые начинаются с символа 
подчеркивания (_) или двойного символа подчеркивания (__). Однако в Python инкапсуляция не является строгой, и доступ к закрытым членам класса всё равно возможен.

Наследование (Inheritance): Наследование позволяет создавать новый класс на основе существующего класса (родительского класса). Дочерний класс (подкласс) наследует атрибуты 
и методы родительского класса и может добавлять новые или переопределять существующие методы. Это способствует повторному использованию кода и созданию иерархий классов.

Полиморфизм (Polymorphism): Полиморфизм позволяет объектам разных классов реагировать на одинаковые методы или операции таким образом, чтобы их поведение было специфичным 
для каждого класса. Это упрощает работу с различными объектами, используя общий интерфейс.

Абстракция (Abstraction): Абстракция позволяет скрыть детали реализации и предоставить только необходимые сведения для использования объекта или класса. В Python абстракция 
может быть достигнута через создание абстрактных классов с помощью модуля abc (Abstract Base Classes).