Временная сложность алгоритма оценивается с использованием "большой O" нотации (Big O notation):

O(1) - Константная сложность: Время выполнения алгоритма не зависит от размера входных данных.
O(log n) - Логарифмическая сложность: Время выполнения алгоритма растет логарифмически по размеру входных данных.
O(n) - Линейная сложность: Время выполнения алгоритма линейно зависит от размера входных данных.
O(n log n) - Линейно-логарифмическая сложность: Время выполнения алгоритма растет логарифмически по размеру данных, умноженному на сам размер данных.
O(n^2) - Квадратичная сложность: Время выполнения алгоритма увеличивается квадратично по размеру входных данных.
O(2^n) - Экспоненциальная сложность: Время выполнения алгоритма увеличивается экспоненциально по размеру входных данных.
O(n!) - Факториальная сложность: Время выполнения алгоритма растет факториально по размеру входных данных и является наиболее медленным типом сложности.

Binary_search: Алгоритм бинарного поиска. Бинарный поиск ищет элемент в отсортированном массиве, разделяя его пополам на каждом шаге, что позволяет быстро находить элемент.
Bubble_sort: Алгоритм сортировки пузырьком. Этот метод сортировки сравнивает и перемещает соседние элементы массива, пока не достигнется правильный порядок.
Cocktail_shaker_sort: Этот алгоритм также известен как "шейкерная сортировка" и представляет собой модификацию сортировки пузырьком.
Insertion_sort: Алгоритм сортировки вставками. Он сортирует массив, вставляя каждый элемент на правильное место в уже отсортированной части массива.
Merge_sort: Алгоритм сортировки слиянием. Он разделяет массив на более мелкие части, сортирует их и затем объединяет в один отсортированный массив.
Quick_sort: Алгоритм быстрой сортировки. Это один из наиболее эффективных алгоритмов сортировки. Он разбивает массив на подмассивы и сортирует их рекурсивно.
Selection_sort: Алгоритм сортировки выбором. Он находит минимальный элемент в массиве и помещает его на начало, затем повторяет процесс для оставшейся части массива.
